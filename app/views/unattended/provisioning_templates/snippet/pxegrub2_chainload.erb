<%#
kind: snippet
name: pxegrub2_chainload
model: ProvisioningTemplate
snippet: true
%>
<%
  paths = [
    '/EFI/fedora/shim.efi',
    '/EFI/fedora/grubx64.efi',
    '/EFI/redhat/shim.efi',
    '/EFI/redhat/grubx64.efi',
    '/EFI/centos/shim.efi',
    '/EFI/centos/grubx64.efi',
    '/EFI/debian/grubx64.efi',
    '/EFI/ubuntu/grubx64.efi',
    '/EFI/sles/grubx64.efi',
    '/EFI/opensuse/grubx64.efi',
    '/EFI/Microsoft/boot/bootmgfw.efi'
  ]
-%>
insmod part_gpt
insmod fat
insmod chain

menuentry 'Chainload Grub2 EFI from ESP' --id local_chain_hd0 {
  while true; do
    echo "Chainloading Grub2 EFI from ESP, available devices:"
    ls
<%
  paths.each do |path|
-%>
    echo "Trying <%= path %> "
    unset chroot
    search --file --no-floppy --set=chroot <%= path %>
    if [ -f ($chroot)<%= path %> ]; then
      chainloader ($chroot)<%= path %>
      echo "Found <%= path %> at $chroot, attempting to chainboot it..."
      sleep 2
      boot
    fi
<%
  end
-%>
    echo "Unable to find a partition with shim.efi or grubx64.efi:"
    echo
    ls
    echo
    echo "When missing drives or parititions, ensure they are avaialble for boot"
    echo "in EFI firmware. When booting uncommon OS, edit 'pxegrub2_chainload'"
    echo "template and update search paths. Note ESP chainbooting is not supported"
    echo "in SecureBoot mode."
    echo
    echo "Consider booting from HDD directly, use 'efi_bootentry' host parameter"
    echo "to set specific EFI boot entry after OS installation or use efibootmgr"
    echo "utility directly to modify the boot order."
    echo
    echo "Will try again in 30 seconds, press ESC to search again immediately."
    sleep -i 30
  done
}

menuentry 'Chainload into BIOS bootloader on first disk' --id local_chain_legacy_hd0 {
  set root=(hd0,0)
  chainloader +1
  boot
}

menuentry 'Chainload into BIOS bootloader on second disk' --id local_chain_legacy_hd1 {
  set root=(hd1,0)
  chainloader +1
  boot
}
